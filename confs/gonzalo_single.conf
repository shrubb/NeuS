general {
    base_exp_dir = ./logs/018-debug
    recording = []
}

dataset {
    data_dirs = [
        "./datasets/Gonzalo/018/2021-05-20-17-54-26/portrait_reconstruction/",
    ]
    // 018 -
    images_to_pick = [[0, "default"]]
    images_to_pick_val = [[0, ["00697", "01357"]]]

    batch_size = ${train.batch_size}
}

train {
    learning_rate = 3e-4
    // exponential decay: at iteration #`end_iter`,
    // the learning rate will be `learning_rate * learning_rate_alpha`
    learning_rate_alpha = 1.0
    // step decay: at specified steps, multiply learning rate by `learning_rate_reduce_factor`
    learning_rate_reduce_steps = [120000, 180000]
    learning_rate_reduce_factor = 0.2
    end_iter = 220000

    batch_size = 512
    // render validation images to TensorBoard this times smaller then original
    validate_resolution_level = 2
    // linear learning rate warmup between iterations #0 and #`warm_up_end`
    warm_up_end = 500
    anneal_end = 0
    use_white_bkgd = False

    // save checkpoint every `save_freq` iterations
    save_freq = 10000
    // render images to TensorBoard every `val_freq` iterations
    val_freq = 3500
    // save a rough mesh every `val_mesh_freq` iterations
    val_mesh_freq = 5000
    report_freq = 100

    // Eikonal loss weight
    igr_weight = 0.1
    // Mask loss weight (0.0 = not using foreground masks)
    mask_weight = 0.0 // 0.1
}

// Architecture. Different from NeuS, weight_norm is switched off.
model {
    nerf {
        D = 8,
        d_in = 4,
        d_in_view = 3,
        W = 256,
        multires = 10,
        multires_view = 4,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True
    }

    sdf_network {
        d_out = 257
        d_in = 3
        d_hidden = 256
        n_layers = 8
        skip_in = [4]
        multires = 6
        bias = 0.5
        scale = 1.0
        geometric_init = true
        weight_norm = false
    }

    variance_network {
        init_val = 0.3
    }

    // 'Color network'. 
    rendering_network {
        d_feature = 256
        mode = idr // no_view_dir
        d_in = 9 // 6
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = false
        multires_view = 4 // 0
        squeeze_out = True
    }

    neus_renderer {
        // Number of sampled on the ray
        n_samples = 64
        // Number of additional samples in the second stage
        n_importance = 64
        // Number of additional samples in the dedicated NeRF that models the background
        n_outside = 32 // 0
        // Number of steps to resample ray points
        up_sample_steps = 4     // 1 for simple coarse-to-fine sampling
        perturb = 1.0
    }
}

