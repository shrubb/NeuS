dataset {
    data_dirs = [
        "/gpfs/data/gpfs0/egor.burkov/Datasets/Gonzalo/132/2021-07-22-12-28-42/portrait_reconstruction/", // Аня В
        // "/gpfs/data/gpfs0/egor.burkov/Datasets/Gonzalo/134/2021-07-22-12-44-12/portrait_reconstruction/", // Женя У
        // "/gpfs/data/gpfs0/egor.burkov/Datasets/Gonzalo/130/2021-07-22-11-55-13/portrait_reconstruction/", // Ренат
        // "/gpfs/data/gpfs0/egor.burkov/Datasets/Gonzalo/200/2021-08-25-12-17-50/portrait_reconstruction/", // Итальянец
    ]

    // 132:
    // images_to_pick = [[0, ["00460", "00497", "00661", "00629", "00598"]]]
    // images_to_pick = [[0, ["00460", "00661", "00598"]]]
    // images_to_pick = [[0, ["00460", "00598"]]]
    images_to_pick = [[0, ["00497"]]]
    images_to_pick_val = [[0, ["00747", "00889"]]]

    // 134:
    // images_to_pick = [[0, ["00689", "00731", "00479", "00584", "00556"]]]
    // images_to_pick = [[0, ["00689", "00479", "00556"]]]
    // images_to_pick = [[0, ["00584"]]]
    // images_to_pick_val = [[0, ["00976", "00829"]]]

    // 130:
    // images_to_pick = [[0, ["00552", "00490", "00460", "00749", "01072"]]]
    // images_to_pick = [[0, ["00552", "00460", "01072"]]]
    // images_to_pick = [[0, ["00460"]]]
    // images_to_pick_val = [[0, ["00929", "01029"]]]

    // 064:
    // images_to_pick = [[0, ["00585", "00647", "00701", "00763", "00833"]]]
    // images_to_pick = [[0, ["00585", "00701", "00833"]]]
    // images_to_pick = [[0, ["00647"]]]
    // images_to_pick_val = [[0, ["00647"]]]

    original_num_scenes = 103

    render_cameras_name = cameras_sphere.npz
    batch_size = ${train.batch_size}
}

train {
    finetune = true
    finetuning_init_algorithm = "average"
    parts_to_freeze = ["nerf_outside"]

    learning_rate = 0.0
    learning_rate_alpha = 1.0
    learning_rate_reduce_steps = [13000, 16000]
    learning_rate_reduce_factor = 0.23
    warm_up_end = 0
    end_iter = 18000
    restart_from_iter = 0

    scenewise_layers_optimizer_extra_args {
        base_learning_rate = 4e-4
    }
    cameras_optimizer_extra_args {
        base_learning_rate = ${train.scenewise_layers_optimizer_extra_args.base_learning_rate}
    }

    batch_size = 512
    validate_resolution_level = 2
    anneal_end = 0
    use_white_bkgd = False

    save_freq = 99999999
    val_freq = 2500
    val_mesh_freq = 99999999
    report_freq = 100

    igr_weight = 0.1
    mask_weight = 0.1
    focal_fix_weight = 0.1

    parts_to_skip_loading = ["cameras"]
}

model {
    // scenewise_split_type = interleave_with_skips

    neus_renderer {
        n_outside = 0
    }
}
